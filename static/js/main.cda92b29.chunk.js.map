{"version":3,"sources":["components/UploadButtons.js","components/Javadocs.js","components/FileDownloadComponent.js","components/SingleLines.js","components/MultiLines.js","components/Whitespaces.js","components/Indentations.js","components/RmJavadocs.js","components/StepperPage.js","components/ContactButton.js","components/PageHeader.js","components/MainInfoPage.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","margin","spacing","input","display","button","backgroundColor","color","marginTop","marginRight","dropCard","width","height","paddingTop","paddingLeft","paddingRight","paddingBottom","dropCardBorder","border","borderColor","borderWidth","defaultCardBorder","listCard","padding","alignContent","icon","UploadButtons","props","classes","className","Card","elevation","onDrop","onFileDropped","accept","getRootProps","getInputProps","isDragActive","isDragReject","isDragAccept","acceptedFiles","rejectedFiles","style","fontSize","whiteSpace","id","multiple","type","htmlFor","Button","variant","component","disableElevation","onClick","document","getElementById","onchange","event","fileList","target","files","Javadocs","this","classJavadoc","methodPattern","RegExp","classPattern","content","i","fileContent","javadocFound","lineNum","javadoc","lines","split","numLines","length","line","newline","lineTrim","trim","startsWith","endsWith","exec","validateJavadocComment","generateMethodJavadoc","validateClassJavadocComment","header","javadocComment","returnVal","containsReturn","paramNames","getParamList","javadocLower","toLowerCase","includes","contains","toUpperCase","classJavadocComment","params","countParameters","indentation","countIndentations","indent","comment","open","indexOf","close","segments","substring","names","paramSplit","push","count","spaceCount","c","charAt","CssTextField","withStyles","TextField","React","useState","defaultFileName","currentFileName","setCurrentFileName","lineHeight","onChange","e","newFilteredName","filename","otherPattern","replace","dotIndex","validateFilename","value","callbackFromParent","required","defaultValue","text","element","createElement","setAttribute","encodeURIComponent","body","appendChild","click","removeChild","download","contentList","fileIndex","SingleLines","commentIndex","subString","MultiLines","toWrite","openReached","closeReached","oneLine","Whitespaces","noSpaceBeforeKeywords","noSpaceAfterKeywords","spaceBeforeKeywords","spaceAfterKeywords","item","noSpaceBefore","noSpaceAfter","spaceBefore","spaceAfter","removeTrailingBlank","itemLen","changed","j","ind","numPotentialErrs","numItems","indices","allIndices","temp","checkJavaDocInterfere","trimRight","trimLeft","proper","getProperBefore","checkMult","checkMultiComment","partOfWord","getProperAfter","total","curr","letters","strBefore","strAfter","match","checkMultiStar","checkMultiSlash","Indentations","levels","lineToWrite","l","generateIndentation","elseIndentMark","isIndentMark","isEndIndentMark","RmJavadocs","mainStyles","window","screen","backButton","actionsContainer","marginBottom","resetContainer","step","StyledToggle","selected","label","ToggleButton","iconTheme","createMuiTheme","MuiStepIcon","active","disabled","VerticalLinearStepper","activeStep","setActiveStep","steps","operationOpen","setOperationOpen","fileOpen","setFileOpen","acceptedOpen","setAcceptedOpen","rejectedOpen","setRejectedOpen","javaSelected","setJava","singleSelected","setSingle","multiSelected","setMulti","indentSelected","setIndent","whiteSelected","setWhite","rmJavaSelected","setRmJavaSelected","intialAcceptedFiles","setIntialAcceptedFiles","intialRejectedFiles","setIntialRejectedFiles","uploadedFiles","setUploadedFiles","fixedFileContents","setFixedFileContents","newFileNames","setNewFileNames","fileCallback","oldName","newName","map","handleButton","handleNext","handleRun","handleDownloadAll","prevActiveStep","handleBack","handleReset","fileAccessMethod","inputFile","Promise","resolve","reader","FileReader","onloadend","result","readAsText","java","single","multi","white","rmJava","then","fileText","fixedText","removeJavadocs","addJavadocs","removeSingleLines","removeMultiLines","fixWhitespaces","fixIndentations","performAll","JavadocToggle","SingleToggle","MultiToggle","WhitespaceToggle","IndentationToggle","RmJavadocsToggle","onFileDrop","Array","from","nameList","file","name","stepThree","Typography","componentList","FileDownloadComponent","getFileDownloadComponents","getStepContent","Stepper","orientation","index","Step","key","ThemeProvider","StepLabel","StepContent","Collapse","in","Alert","list","fullString","getFileList","severity","timeout","Paper","square","StepperPage","flexGrow","title","appBarStyles","PageHeader","AppBar","position","Toolbar","href","mainText","flexWrap","fontWeight","fontFamily","marginLeft","subMainText","subText","MainInfoPage","scroll","scrollTo","App","Component","Boolean","location","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cda92b29.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Dropzone from 'react-dropzone';\nimport Card from '@material-ui/core/Card';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport './Component.css';\nimport { Button } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n  input: {\n    display: 'none',\n  },\n  button: {\n    backgroundColor: '#6493a1',\n    color: 'white',\n    marginTop: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    '&:hover': {\n      backgroundColor: '#537b86',\n    },\n  },\n  dropCard: {\n    width: '790px',\n    height: '160px',\n    paddingTop: '20px',\n    paddingLeft: '20px',\n    paddingRight: '15px',\n    paddingBottom: '15px',\n  },\n  dropCardBorder: {\n    border: 'dashed',\n    borderColor: '#6493a1',\n    borderWidth: '2px',\n    width: '780px',\n    height: '150px',\n  },\n  defaultCardBorder: {\n    border: 'dashed',\n    borderColor: '#D3D3D3',\n    borderWidth: '2px',\n    width: '780px',\n    height: '150px',\n  },\n  listCard: {\n    color: '#154854',\n    width: '200px',\n    backgroundColor: 'white',\n    padding: '10px',\n    alignContent: 'center',\n  },\n  icon: {\n    color: '#6493a1'\n  }\n}));\n\nexport default function UploadButtons(props) {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Card elevation={0} className={classes.dropCard}>\n        <Dropzone className={classes.dropCard} onDrop={props.onFileDropped} accept='.java'>\n          {({getRootProps, getInputProps, isDragActive, isDragReject, isDragAccept, acceptedFiles, rejectedFiles}) => (\n            <section style={{ width: 150, height: 780 }}>\n              <div {...getRootProps()}>\n                <input {...getInputProps()} />\n                {!isDragActive ? \n                  <div className={classes.defaultCardBorder}>\n                    <div className='Dropzone'>\n                    <p></p>\n                    <CloudUploadIcon className={classes.icon} fontSize='large'></CloudUploadIcon>\n                    <p style={{ color: '#6493a1', whiteSpace: 'break-spaces' }}>Choose a file or drop it here</p>\n                    <p></p>\n                    </div>\n                  </div>:\n                  <div className={classes.dropCardBorder}>\n                    <div className='Dropzone'>\n                    <p></p>\n                    <CloudUploadIcon className={classes.icon} fontSize='large'></CloudUploadIcon>\n                    <p style={{ color: '#6493a1', whiteSpace: 'break-spaces' }}>Drop it here!</p>\n                    <p></p>\n                    </div>\n                  </div>\n                }\n              </div>\n            </section>\n          )}\n        </Dropzone>\n      </Card>\n      <p>\n\n      </p>\n      <div>\n      <input\n        accept=\".java\"\n        className={classes.input}\n        id=\"contained-button-file\"\n        multiple\n        type=\"file\"\n      />\n      <label htmlFor=\"contained-button-file\">\n        <Button \n        variant=\"contained\" \n        component=\"span\"\n        className={classes.button}\n        disableElevation\n        onClick={() => {\n          document.getElementById('contained-button-file').onchange = function(event) {\n            var fileList = event.target.files;\n            props.onFileDropped(fileList, []);\n         }\n        }}\n        >\n          Upload Files\n        </Button>\n      </label>\n    </div>\n    </div>\n  );\n}\n","/**\n * Javadocs class that adds java doc comment templates\n * to the provided java code.\n */\nexport default class Javadocs {\n\n    /**\n     * Default constructor for the Javadocs class.\n     * Contains information about javadoc class and method\n     * formats, and method and class patterns.\n     */\n    constructor() {\n        this.classJavadoc =\n            \"/**\\n\" + \n            \" * \\n\" + \n            \" * @author\\n\" + \n            \" */\\n\";\n        this.methodPattern = new RegExp(\n            \"(\\\\p{Space})*(public |protected |private )?\" +\n            \"(static )?\" +\n            \"(void |[\\\\w\\\\W]+ )\" +\n            \"([a-zA-Z0-9]+)\" +\n            \"\\\\(\" +\n            \"(([\\\\w\\\\W]+ [a-zA-Z0-9]+)|\" +\n            \"(([\\\\w\\\\W]+ [a-zA-Z0-9]+, )+[\\\\w\\\\W]+ [a-zA-Z0-9]+))?\" + \n            \"\\\\) ?\\\\{\");\n        this.classPattern = new RegExp(\n            \"(\\\\p{Space})*(public |protected |private )?\" +\n            \"(static )?\" + \n            \"(class )\" +\n            \"(extends |implements )?\" +\n            \"([a-zA-Z0-9]+) ?\\\\{\"\n        );\n\n    }\n\n    /**\n     * Adds javadoc comment templates before each method and \n     * class header. Highlights incorrect javadoc comments\n     * with a header in order to notify the user to change\n     * the javadoc format.\n     * @param {String} content the content of the original file.\n     */\n    addJavadocs(content) {\n        var fileContent = \"\";\n        var javadocFound = false;\n        var lineNum = 1;\n        var javadoc = \"\";\n        var lines = content.split(\"\\n\");\n        var numLines = lines.length;\n        var i;\n        for (i = 0; i < lines.length; i++) {\n            var line = lines[i];\n            var newline = \"\";\n            if (lineNum < numLines) {\n                newline = \"\\n\";\n            }\n            var lineTrim = line.trim();\n            if (!lineTrim.startsWith(\"/**\") && lineTrim.startsWith(\"/*\")) {\n                fileContent += line + newline;\n            } else if (lineTrim.startsWith(\"/**\") && lineTrim.endsWith(\"*/\")) {\n                javadocFound = false;\n                javadoc += line + newline;\n            } else if (lineTrim.startsWith(\"/**\")) {\n                javadocFound = true;\n                javadoc += line + newline;\n            } else if (lineTrim.endsWith(\"*/\")) {\n                if (javadocFound) {\n                    javadocFound = false;\n                    javadoc += line + newline;\n                } else {\n                    fileContent += line + newline;\n                }\n            } else if (javadocFound) {\n                javadoc += line + newline;\n            } else if (line === \"\" || lineTrim === \"\") {\n                fileContent += line + newline;\n            } else if (this.methodPattern.exec(lineTrim)) {\n                if (javadoc !== \"\") {\n                    if (this.validateJavadocComment(line, javadoc)) {\n                        fileContent += javadoc;\n                    } else {\n                        fileContent += \"------- INCORRECT JAVADOC FORMAT -------\\n\";\n                        fileContent += javadoc;\n                        fileContent += \"----------------------------------------\\n\";\n                    }\n                    fileContent += line + newline;\n                    javadoc = \"\";\n                } else {\n                    var comment = this.generateMethodJavadoc(line);\n                    fileContent += comment;\n                    fileContent += line + newline;\n                }\n            } else if (this.classPattern.exec(line)) {\n                if (javadoc !== \"\") {\n                    if (this.validateClassJavadocComment(javadoc)) {\n                        fileContent += javadoc;\n                    } else {\n                        fileContent += \"------- ADD @AUTHOR TAG TO JAVADOC -------\\n\";\n                        fileContent += javadoc;\n                        fileContent += \"----------------------------------------\\n\";\n                    }\n                    fileContent += line + newline;\n                    javadoc = \"\";\n                } else {\n                    fileContent += this.classJavadoc;\n                    fileContent += line + newline;\n                }\n            } else {\n                if (javadoc !== \"\") {\n                    fileContent += javadoc + newline;\n                }\n                fileContent += line + newline;\n                javadoc = \"\";\n            }\n            lineNum++;\n        }\n        return fileContent;\n    }\n\n    /**\n     * Returns true if the provided javadoc comment and \n     * the header are of correct format according \n     * to the style guide and false otherwise.\n     * @param {String} header the method header.\n     * @param {String} javadocComment the provided javadoc comment.\n     */\n    validateJavadocComment(header, javadocComment) {\n        var returnVal = this.containsReturn(header);\n        var paramNames = this.getParamList(header);\n        var javadocLower = javadocComment.toLowerCase();\n        if (returnVal) {\n            if (!(javadocLower.includes(\"@return\") || javadocLower.includes(\"returns\")\n                || javadocLower.includes(\"returning\") || javadocLower.includes(\"return\"))) {\n                return false;\n            }\n        }\n        var i;\n        for (i = 0; i < paramNames; i++) {\n            if (!(javadocComment.contains(\"@param \" + paramNames[i]) || javadocComment.contains(paramNames[i].toUpperCase()))) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Returns true if the provided class javadoc comment\n     * is of correct format according to\n     * the style guide and false otherwise.\n     * @param {String} classJavadocComment the provided class javadoc comment.\n     */\n    validateClassJavadocComment(classJavadocComment) {\n        return classJavadocComment.includes(\"@author\");\n    }\n\n    /**\n     * Returns a javadoc template for a method header provided.\n     * @param {String} header the method header.\n     */\n    generateMethodJavadoc(header) {\n        var params = this.countParameters(header);\n        var returnVal = this.containsReturn(header);\n        var indentation = this.countIndentations(header);\n        var paramNames = this.getParamList(header);\n        var indent = \"\";\n        var i;\n        for (i = 0; i < indentation; i++) {\n            indent += \"\\t\";\n        }\n        var comment = indent + \"/**\\n\" + indent + \" *\\n\";\n        for (i = 0; i < params; i++) {\n            comment = comment + indent + \" * @param \" + paramNames[i] + \"\\n\";\n        }\n        if (returnVal) {\n            comment = comment + indent + \" * @return\\n\";\n        }\n        comment = comment + indent + \" */\\n\";\n        return comment;\n    }\n\n    /**\n     * Returns the number of parameters in the provided method \n     * header.\n     * @param {String} header the method header. \n     */\n    countParameters(header) {\n        return this.getParamList(header).length;\n    }\n\n    /**\n     * Returns an array of parameter names that are \n     * contained within the method header provided.\n     * @param {String} header the method header.\n     */\n    getParamList(header) {\n        var open = header.indexOf('(');\n        var close = header.indexOf(')');\n        var paramString = header.substring(open + 1, close);\n        var segments = paramString.split(\",\");\n        var names = [];\n        var i;\n        for (i in segments) {\n            var paramSplit = segments[i].split(\" \");\n            names.push(paramSplit[paramSplit.length - 1]);\n        }\n        return names;\n    }\n\n    /**\n     * Returns true if the method header contains a return\n     * type other than void and false otherwise.\n     * @param {String} header the method header.\n     */\n    containsReturn(header) {\n        return !header.includes(\"void\");\n    }\n\n    /**\n     * Returns the number of indentations before the method\n     * header provided.\n     * @param {String} header the method header. \n     */\n    countIndentations(header) {\n        var count = 0;\n        var spaceCount = 0;\n        var i = 0;\n        for (i = 0; i < header.length; i++) {\n            var c = header.charAt(i);\n            if (c !== '\\t' && c !== ' ') {\n                break;\n            }\n            if (c === '\\t') {\n                count += 1;\n            }\n            if (c === ' ') {\n                spaceCount++;\n            }\n        }\n        return count + (spaceCount / 4);\n    }\n}\n","import TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst CssTextField = withStyles({\n    root: {\n        '& .MuiOutlinedInput-root': {\n            '&.Mui-focused fieldset': {\n                borderColor: '#6493a1',\n            },\n            color: '#6493a1',\n        },\n    },\n}) (TextField);\n\nconst useStyles = makeStyles((theme) => ({\n    button: {\n        backgroundColor: '#6493a1',\n        '&:hover': {\n          backgroundColor: '#537b86',\n        },\n        color: 'white',\n        marginTop: theme.spacing(1),\n        marginRight: theme.spacing(1),\n    },\n}));\n\nexport default function(props) {\n\n    /**\n     * The styles and states of the FileDownloadComponent that\n     * needs to be kept track of.\n     */\n    const classes = useStyles();\n    const [currentFileName, setCurrentFileName] = React.useState(props.defaultFileName);\n\n    /**\n     * Helper function that takes in a filename\n     * and validates and cleans it, returning a valid\n     * filename based on the input.\n     * @param {String} filename the inputted filename.\n     */\n    function validateFilename(filename) {\n        var otherPattern = new RegExp(\"\\\\W\");\n        if (filename.trim() === \"\" || otherPattern.exec(filename)) {\n            return currentFileName;\n        } else {\n            filename = filename.replace(\" \", \"_\");\n            if (!filename.includes(\".\") && !filename.includes(\".java\")) {\n                return filename + \".java\";\n            } else if (filename.includes(\".\")) {\n                var dotIndex = filename.indexOf(\".\", 0);\n                return filename.substring(0, dotIndex) + \".java\";\n            } else {\n                return filename;\n            }\n        }\n    }\n\n    /**\n     * The handler method that handles a change to\n     * the text field.\n     * @param {Object} e the event object that the text field returns. \n     */\n    function handleChange(e) {\n        var newUnfilteredName = e.target.value;\n        var newFilteredName = validateFilename(newUnfilteredName);\n        props.callbackFromParent(currentFileName, newFilteredName);\n        setCurrentFileName(newFilteredName);\n    }\n\n    /**\n     * Helper method that performs a download when called\n     * using the filename and the content passed in.\n     * @param {String} filename the name of the file.\n     * @param {String} text the content that the file will contain once downloaded.\n     */\n    function download(filename, text) {\n        var element = document.createElement('a');\n        element.setAttribute('href', 'data:.java;charset=utf-8,' + encodeURIComponent(text));\n        element.setAttribute('download', filename);\n      \n        element.style.display = 'none';\n        document.body.appendChild(element);\n      \n        element.click();\n      \n        document.body.removeChild(element);\n    }\n\n    /**\n     * The handler method that performs the download using the \n     * appropriate variables.\n     */\n    function doDownload() {\n        download(currentFileName, props.contentList[props.fileIndex]);    \n    }\n\n    /**\n     * The components that make up the FileDownloadComponent.\n     */\n    return (\n        <div className='DownloadTextField' style={{ whiteSpace: 'break-spaces', lineHeight: 4.5 }}>\n            <CssTextField \n            onChange={handleChange}\n            required\n            id=\"outlined-required\"\n            defaultValue={props.defaultFileName}\n            variant=\"outlined\">\n            </CssTextField>\n            <span>        </span> \n            <Button\n            onClick={doDownload}\n            variant='contained'\n            className={classes.button}\n            disableElevation\n            >\n                Download File\n            </Button>\n        </div>\n    );\n}","export default class SingleLines {\n    \n    constructor() {\n    }\n\n    removeSingleLines(content) {\n        var fileContent = \"\";\n        var lines = content.split(\"\\n\");\n        var numLines = lines.length;\n        var lineNum = 1;\n        var i;\n        for (i = 0; i < lines.length; i++) {\n            var line = lines[i];\n            var newline = \"\";\n            if (lineNum < numLines) {\n                newline = \"\\n\";\n            } else {\n                newline = \"\";\n            }\n            if (line.includes(\"//\")) {\n                var commentIndex = line.indexOf(\"//\", 0);\n                if (commentIndex !== 0) {\n                var subString = line.substring(0, commentIndex);\n                if (subString.trim() === \"\") {\n                    fileContent += subString + newline;\n                }\n                }\n            } else {\n                fileContent += line + newline;\n            }\n            lineNum++;\n        }\n        return fileContent;\n    }\n}\n","/**\n * MultiLines class that removes multi line comments\n * from the provided java code.\n */\nexport default class MultiLines {\n\n    /**\n     * Default constructor for the MultiLines\n     * class.\n     */\n    constructor() {\n    }\n\n    /**\n     * Takes in the file content and removes all the multi line comments\n     * from the provided file content, returning the fixed file content.\n     * @param {String} content the content of the original file.\n     */\n    removeMultiLines(content) {\n        var fileContent = \"\";\n        var lines = content.split(\"\\n\");\n        var numLines = lines.length;\n        var lineNum = 1;\n        var i;\n        var toWrite = \"\";\n        var openReached = false;\n        var closeReached = false;\n        var oneLine = false;\n        for (i = 0; i < lines.length; i++) {\n            var line = lines[i];\n            var newline = \"\";\n            if (lineNum < numLines) {\n                newline = \"\\n\";\n            } else {\n                newline = \"\";\n            }\n            if (line.includes(\"/*\") && line.includes(\"*/\")) {\n                if (line.indexOf(\"/**\") !== line.indexOf(\"/*\")) {\n                    openReached = false;\n                    closeReached = false;\n                    oneLine = true;\n                }\n            } else if (line.includes(\"/*\")) {\n                if (line.indexOf(\"/**\") !== line.indexOf(\"/*\")) {\n                    openReached = true;\n                    closeReached = false;\n                }\n            } else if (line.includes(\"*/\")) {\n                if (openReached) {\n                    openReached = false;\n                    closeReached = true;\n                }\n            }\n            toWrite = line;\n            var open = toWrite.indexOf(\"/*\");\n            var close = toWrite.indexOf(\"*/\") + 2;\n            if (oneLine) {\n                toWrite = line.replace(line.substring(open, close), \"\");\n            } else if (openReached && !closeReached) {\n                toWrite = \"\";\n            } else if (closeReached) {\n                toWrite = line.substring(close);\n                openReached = false;\n                closeReached = false;\n            }\n            oneLine = false;\n            fileContent += toWrite + newline;\n        }\n        return fileContent;\n    }\n}","/**\n * The Whitespace class that fixes incorrect\n * or missing whitespaces in the java code.\n */\nexport default class Whitespaces {\n  /**\n   * Default constructor for the Whitespaces class.\n   */\n  constructor() {\n  }\n\n  /**\n   * Applies all the whitespaces fixing helper methods \n   * to the appropriate items and the file content and returns\n   * the new fixed file content.\n   * @param {String} content the content of the original file.\n   */\n  fixWhitespaces(content) {\n    var fileContent = \"\";\n    var noSpaceBeforeKeywords = [\"++\", \"--\", \";\", \")\"];\n    var noSpaceAfterKeywords = [\"(\", \"!\", \"++\", \"--\"];\n    var spaceBeforeKeywords = [\"&&\", \"||\", \"{\", \"*\", \"+\", \"-\", \"/\", \"=\", \"==\", \"+=\",\"-=\", \"assert\", \"catch\", \"do\", \"else\", \"finally\", \n    \"for\", \"if\", \"return\", \"synchronized\", \"try\", \"while\", \"?\", \":\"];\n    var spaceAfterKeywords = [\"&&\", \"||\", \";\", \",\", \"+\", \"/\", \"-\", \"*\", \"=\", \"+=\", \"==\", \"-=\", \"assert\", \"catch\", \"do\", \"else\", \"finally\", \n    \"for\", \"if\", \"return\", \"synchronized\", \"try\", \"while\", \"?\", \":\"];\n    var i;\n    for (i = 0; i < noSpaceBeforeKeywords.length; i++) {\n      var item = noSpaceBeforeKeywords[i];\n      fileContent = this.noSpaceBefore(content.split(\"\\n\"), item);\n    }\n    for (i = 0; i < noSpaceAfterKeywords.length; i++) {\n      var item = noSpaceAfterKeywords[i];\n      fileContent = this.noSpaceAfter(fileContent.split(\"\\n\"), item);\n    }\n    for (i = 0; i < spaceBeforeKeywords.length; i++) {\n      var item = spaceBeforeKeywords[i];\n      fileContent = this.spaceBefore(fileContent.split(\"\\n\"), item);\n    }\n    for (i = 0; i < spaceAfterKeywords.length; i++) {\n      var item = spaceAfterKeywords[i];\n      fileContent = this.spaceAfter(fileContent.split(\"\\n\"), item);\n    }\n    fileContent = this.removeTrailingBlank(fileContent.split(\"\\n\"));;\n    return fileContent;\n  }\n\n  /**\n   * Method that ensures there is no space before the item provided\n   * in the lines provided.\n   * @param {Array} lines the array of the lines of code.\n   * @param {String} item the item to look for in the code.\n   */\n  noSpaceBefore(lines, item) {\n      var fileContent = \"\";\n      var toWrite = \"\";\n      var itemLen = item.length;\n      var changed = false;\n      var numLines = lines.length;\n      var lineNum = 1;\n      var i;\n      for (i = 0; i < lines.length; i++) {\n          var line = lines[i];\n        if (line.includes(item)) {\n          var ind = line.indexOf(item);\n          var numPotentialErrs = this.numItems(line, item, itemLen);\n          var indices = this.allIndices(line, item, ind, itemLen);\n          var j;\n          for (j = 0; j < numPotentialErrs; j++) {\n                if (!this.checkJavaDocInterfere(line)) {\n                    if (toWrite === \"\") {\n                  if (line.charAt(indices[j] - 1) === ' ') {\n                  toWrite = line.substring(0, indices[j]).trimRight();\n                  toWrite += line.substring(indices[j]);\n                  indices = this.allIndices(toWrite, item, toWrite.indexOf(item), itemLen);\n                  changed = true;\n                  }\n                } else {\n                  var temp;\n                  temp = toWrite.substring(indices[j]);\n                  toWrite = toWrite.substring(0, indices[j]).trimRight();\n                  toWrite += temp;\n                  indices = this.allIndices(toWrite, item, toWrite.indexOf(item), itemLen);\n                  changed = true;\n                }\n              }\n          }\n          if (toWrite !== \"\") {\n            fileContent += toWrite;\n            if (lineNum < numLines) {\n              fileContent += \"\\n\";\n            }\n          }\n          toWrite = \"\";\n        }\n        if (!changed) {\n          fileContent += line;\n          if (lineNum < numLines) {\n            fileContent += \"\\n\";\n          }\n        }\n        changed = false;\n        lineNum++;\n      }\n      return fileContent;\n  }\n\n  /**\n   * Method that ensures there is no space after the item provided\n   * in the lines provided.\n   * @param {Array} lines the array of the lines of code.\n   * @param {String} item the item to look for in the code.\n   */\n  noSpaceAfter(lines, item) {\n    var fileContent = \"\";\n    var toWrite = \"\";\n    var itemLen = item.length;\n    var changed = false;\n    var numLines = lines.length;\n    var lineNum = 1;\n    var i;\n    for (i = 0; i < numLines; i++) {\n        var line = lines[i];\n      if (line.includes(item)) {\n        var ind = line.indexOf(item);\n        var numPotentialErrs = this.numItems(line, item, itemLen);\n        var indices = this.allIndices(line, item, ind, itemLen);\n        var j;\n        for (j = 0; j < numPotentialErrs; j++) {\n              if (!this.checkJavaDocInterfere(line)) {\n                  if (toWrite === \"\") {\n                    if (line.charAt(indices[j] + 1) ===  ' ') {\n                        toWrite = line.substring(0, indices[j] + itemLen);\n                        toWrite += line.substring(indices[j] + itemLen).trimLeft();\n                        indices = this.allIndices(toWrite, item, toWrite.indexOf(item), itemLen);\n                        changed = true;\n                    }\n                  } else {\n                        var temp = toWrite.substring(indices[j] + itemLen).trimLeft();\n                        toWrite = toWrite.substring(0, indices[j] + itemLen);\n                        toWrite += temp;\n                        indices = this.allIndices(toWrite, item, toWrite.indexOf(item), itemLen);\n                        changed = true;\n                    } \n              }\n        }\n        if (toWrite !== \"\") {\n          fileContent += toWrite;\n          if (lineNum < numLines) {\n            fileContent += \"\\n\";\n          }\n        }\n        toWrite = \"\";\n      }\n      if (!changed) {\n        fileContent += line;\n        if (lineNum < numLines) {\n            fileContent += \"\\n\";\n        }\n      }\n      changed = false;\n      lineNum++;\n    }\n    return fileContent;\n  }\n    \n  /**\n   * Method that ensures there is a single space before the item \n   * provided in the lines provided.\n   * @param {Array} lines the array of the lines of code.\n   * @param {String} item the item to look for in the code. \n   */\n  spaceBefore(lines, item) {\n    var fileContent = \"\";\n    var itemLen = item.length;\n    var toWrite = \"\";\n    var changed = false;\n    var proper = \"\";\n    var numLines = lines.length;\n    var lineNum = 1;\n    var i;\n    for (i = 0; i < numLines; i++) {\n        var line = lines[i];\n      if (line.includes(item)) {\n        var ind = line.indexOf(item);\n        var numPotentialErrs = this.numItems(line, item, itemLen);\n        var indices = this.allIndices(line, item, ind, itemLen);\n        var j;\n        for (j = 0; j < numPotentialErrs; j++) {\n          if (!this.checkJavaDocInterfere(line)) { \n            if (toWrite === \"\") {\n              proper = this.getProperBefore(line, ind);\n              if (ind === 0 && !this.checkMult(line, item) \n                && !this.checkMultiComment(line, item, indices[j])&& !this.partOfWord(line, item, indices[j])) {\n                toWrite = line.substring(0, indices[j]); \n                toWrite += \" \" + line.substring(indices[j]); \n                indices = this.allIndices(toWrite, item, toWrite.indexOf(item), itemLen);\n                changed = true; \n              }\n              if (ind !== 0) {\n                if (line.charAt(ind - 1) !== ' ' && !this.checkMult(line, item) \n                  && !this.checkMultiComment(line, item, indices[j])&& !this.partOfWord(line, item, indices[j])) {\n                  toWrite = line.substring(0, indices[j]);\n                  toWrite += \" \" + line.substring(indices[j]);\n                  indices = this.allIndices(toWrite, item, toWrite.indexOf(item), itemLen);\n                  changed = true;\n                } else if (proper.trim() !== line.trim() && !this.checkMult(line, item) \n                  && !this.checkMultiComment(line, item, indices[j]) && !this.partOfWord(line, item, indices[j])) {\n                  toWrite = line.substring(0, indices[j]).trimRight();\n                  toWrite += \" \" + line.substring(indices[j]);\n                  indices = this.allIndices(toWrite, item, toWrite.indexOf(item), itemLen);\n                  changed = true;\n                }\n              }\n            } else {\n              if (!this.checkMult(toWrite, item) && !this.checkMultiComment(toWrite, item, indices[j]) && !this.partOfWord(line, item, indices[j])) {\n                proper = this.getProperBefore(toWrite, indices[j]);\n                var temp = \" \" + toWrite.substring(indices[j]);\n                toWrite = toWrite.substring(0, indices[j]).trimRight();\n                toWrite += temp;\n                indices = this.allIndices(toWrite, item, toWrite.indexOf(item), itemLen);\n                changed = true;\n              }\n            }\n          }\n        }\n        if (toWrite !== \"\") {\n          fileContent += toWrite;\n          if (lineNum < numLines) {\n            fileContent += \"\\n\";\n          }\n        }\n        toWrite = \"\";\n      }\n      if (!changed) {\n        fileContent += line;\n        if (lineNum < numLines) {\n            fileContent += \"\\n\";\n        }\n      }\n      changed = false;\n      lineNum++;\n    }\n    return fileContent;\n  }\n    \n  /**\n   * Method that ensures there is a single space after the item\n   * provided in the lines provided.\n   * @param {Array} lines the array of the lines of code.\n   * @param {String} item the item to look for in the code.\n   */\n  spaceAfter(lines, item) {\n    var fileContent = \"\";\n    var toWrite = \"\";\n    var itemLen = item.length;\n    var changed = false;\n    var numLines = lines.length;\n    var lineNum = 1;\n    var i;\n    for (i = 0; i < numLines; i++) {\n        var line = lines[i];\n      if (line.includes(item)) {\n        var ind = line.indexOf(item);\n        var numPotentialErrs = this.numItems(line, item, itemLen);\n        var proper = \"\";\n        var indices = this.allIndices(line, item, ind, itemLen);\n        var j;\n        for (j = 0; j < numPotentialErrs; j++) {\n              if (!this.checkJavaDocInterfere(line)) {\n                  if (toWrite === \"\") {\n                      proper = this.getProperAfter(line, ind, itemLen);\n                      if (indices[j] === line.length - 1) {\n                        toWrite = line + \" \";\n                        indices = this.allIndices(toWrite, item, toWrite.indexOf(item), itemLen);\n                        changed = true;\n                      } else if (proper.trim() !== line.trim() && !this.checkMult(line, item)\n                        && !this.checkMultiComment(line, item, indices[j]) && !this.partOfWord(line, item, indices[j])) {\n                        toWrite = line.substring(0, indices[j] + itemLen);\n                        toWrite += \" \" + line.substring(indices[j] + itemLen).trimLeft();\n                        indices = this.allIndices(toWrite, item, toWrite.indexOf(item), itemLen);\n                        changed = true;\n                    }\n                  } else {\n                    if (indices[j] === toWrite.length - 1) {\n                      toWrite = toWrite + \" \";\n                      indices = this.allIndices(toWrite, item, toWrite.indexOf(item), itemLen);\n                      changed = true;\n                    } else if (!this.checkMult(toWrite, item) && !this.checkMultiComment(toWrite, item, indices[j]) && !this.partOfWord(line, item, indices[j])) {\n                      proper = this.getProperAfter(toWrite, indices[j], itemLen);\n                      var temp = toWrite.substring(indices[j] + itemLen).trimLeft();\n                      toWrite = toWrite.substring(0, indices[j] + itemLen) + \" \";\n                      toWrite += temp;\n                      indices = this.allIndices(toWrite, item, toWrite.indexOf(item), itemLen);\n                      changed = true;\n                    }\n                  }\n                }\n              }\n        if (toWrite !== (\"\")) {\n          fileContent += toWrite;\n          if (lineNum < numLines) {\n            fileContent += \"\\n\";\n          }\n        }\n        toWrite = \"\";\n      }\n      if (!changed) {\n        fileContent += line;\n        if (lineNum < numLines) {\n            fileContent += \"\\n\";\n        }\n      }\n      changed = false;\n      lineNum++;\n    }\n    return fileContent;\n  }\n        \n  /**\n   * Reads a line and ensures that it does not interefere \n   * with other ICEcΔp edits.\n   * @param {String} line the line to look over.\n   */\n  checkJavaDocInterfere(line) {\n    if (line === \"------- INCORRECT JAVADOC FORMAT -------\" || line === \"----------------------------------------\") {\n      return true; \n    }\n    return false; \n  }\n    \n  /**\n   * Reads a line and counts all appearances of item within\n   * it. Takes in the line, the item and the item's length. \n   * @param {String} line the line to look over. \n   * @param {String} item the item to count.\n   * @param {number} itemLen the length of the item.\n   */\n  numItems(line, item, itemLen) {\n    var total = 0;\n    var temp = line;\n    while (temp.includes(item) && !(temp.trim() === item)) {\n      total++;\n      var ind = temp.indexOf(item);\n      if (itemLen === 1) {\n        temp = temp.substring(ind + itemLen);\n      } else {\n        temp = temp.substring(ind + itemLen - 1);\n      }\n    }\n    return total;\n  }\n    \n  /**\n   * Reads a line and using the line, the item the first index \n   * of the item and the item's length, returns a list of\n   * all the indices of a string snippet within that line.\n   * @param {String} line the line to read over.\n   * @param {String} item the item to look for.\n   * @param {number} ind the first index of the item in the given line.\n   * @param {number} itemLen the length of the item.\n   */\n  allIndices(line, item, ind, itemLen) {\n    var indices = [];\n    indices.push(ind);\n    var curr = 0;\n    if (itemLen === 1) {\n      curr = ind + itemLen;\n    } else {\n      curr = ind + itemLen - 1;\n    }\n    var temp = line.substring(curr);\n    while (temp.includes(item) && !(temp.trim() === item)) {\n      curr += temp.indexOf(item);\n      indices.push(curr);\n      if (itemLen === 1) {\n        curr += itemLen;\n        temp = temp.substring(temp.indexOf(item) + itemLen);\n      } else {\n        curr += itemLen - 1;\n        temp = temp.substring(temp.indexOf(item) + itemLen - 1);\n      }\n    }\n    return indices;\n  }\n\n  /**\n   * Takes in a line, item and the index of the item and determines\n   * whether or not the item is part of a word within the line or\n   * not.\n   * @param {String} line \n   * @param {String} item \n   * @param {number} ind \n   */\n  partOfWord(line, item, ind) {\n    var itemLen = item.length; \n    var letters = /^[A-Za-z]+$/; \n\n    if (ind !== 0 && ind+itemLen+1 <= line.length-1) {\n      var strBefore = line.substring(ind-1, ind);\n      var strAfter = line.substring(ind+itemLen, ind+itemLen+1); \n      \n      if (strBefore.match(letters) || strAfter.match(letters)) {\n        return true; \n      } \n    } else if (ind === 0) {\n      var strAfter = line.substring(ind+itemLen, ind+itemLen+1); \n      if (strAfter.match(letters)) {\n        return true; \n      }\n    } else if (ind+itemLen+1 > line.length-1) {\n      var strBefore = line.substring(ind-1, ind);\n      if (strBefore.match(letters)) {\n        return true; \n      }\n    }\n    return false; \n    \n  }\n\n  /**\n   * Inspects a line and determines if the occurence of item is\n   * a multiple (ex. item is \"+\", checks if the first occurence \n   * in line is \"++\" or \"+=\"). Takes in the line and the item. \n   * @param {String} line the line in which to check for the item.\n   * @param {String} item the item to look for.\n   */\n  checkMult(line, item) {\n    var ind = line.indexOf(item);\n    if (ind !== 0 && ind !== (line.length-1)) {\n        if ((item === \"+\" || item === \"-\" || item === \"=\")\n        && (line.charAt(ind + 1) === '+' || line.charAt(ind + 1) === '-'\n        || line.charAt(ind + 1) === '=')) {\n        return true;\n      } else if ((item === \"+\" && line.charAt(ind + 1) === '=') || item === \"=\"\n          && line.charAt(ind - 1) === '+') {\n          return true;\n      } else if (item === \"/\" && line.charAt(ind + 1) === '/') {\n          return true;\n      } else if (item === \"/\" && line.charAt(ind - 1) === '/') {\n          return true;\n      } else {\n          return false;\n      }\n    } else if (ind === 0) {\n      if ((item === \"+\" || item === \"-\" || item === \"=\")\n        && (line.charAt(ind + 1) === '+' || line.charAt(ind + 1) === '-'\n        || line.charAt(ind + 1) === '=')) {\n        return true;\n      } else if ((item === \"+\" && line.charAt(ind + 1) === '=')) {\n          return true;\n      } else if (item === \"/\" && line.charAt(ind + 1) === '/') {\n          return true;\n      } else {\n          return false;\n      }\n      } else if (ind !== (line.length-1)) {\n          if (item === \"=\"\n            && line.charAt(ind - 1) === '+') {\n            return true;\n      } else if (item === \"/\" && line.charAt(ind - 1) === '/') {\n          return true;\n      } else {\n          return false;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Read a line and using the line and the index, determins if \n   * a certain '/' is part of a multiline comment declaration.\n   * @param {String} line the line to read over.\n   * @param {number} ind the index of the /.\n   */\n  checkMultiSlash(line, ind) {\n    if (line.trim() === \"*/\" || line.trim() === \"/**\" || line.trim() === \"/*\") {\n    return true; \n    } else if (ind !== 0 && ind !== line.length-1) {\n        if (line.charAt(ind + 1) === '*' || line.charAt(ind-1) === '*') {\n            return true; \n        }\n        return false; \n    } else if (ind !== line.length -1) {\n        if (line.charAt(ind +1) === '*') {\n            return true; \n        }\n        return false; \n    } else if (ind !== 0) {\n        if (line.charAt(ind - 1) === '*') {\n              return true;\n        }\n        return false; \n    }    \n    return false;\n  }\n\n  /**\n   * Reads a line and using the line and the index determines if\n   * a certain '*' being inspected is part of a multiline comment\n   * declaration. \n   * @param {String} line the line to read over.\n   * @param {number} ind the index of the *. \n   */\n  checkMultiStar(line, ind) {\n    if (line.trim() === \"*/\" || line.trim() === \"/**\" || line.trim() === \"/*\") {\n    return true; \n    } else if (ind !== 0 && line.charAt(ind-1)=== '.') {\n      //likely part of an import \n      return true; \n    } \n    else if (ind !== 0 && ind !== line.length -1) {\n        if (line.charAt(ind + 1) === '/' || line.charAt(ind - 1) === '/') {\n          return true;\n        } else if (line.charAt(ind + 1) === '*' || line.charAt(ind - 1) === '*') {\n          return true; \n        }\n        return false; \n    } else if (ind !== line.length -1) {\n          if (line.charAt(ind + 1) ==='/') {\n            return true;\n          } else if (line.charAt(ind + 1) === '*') {\n            return true; \n        }\n        return false; \n        \n    }\n    \n    return false;\n  }\n\n  /**\n   * Reads a line and using the line, the item and the first index\n   * of the item, determins if a certain element being inspected\n   * is part of a multiline comment declaration.  \n   * @param {String} line the line to read over.\n   * @param {String} item the item to look for. \n   * @param {number} ind the first index of the item within the line.\n   */\n  checkMultiComment(line, item, ind) {\n    if (item.trim() === \"*\" && this.checkMultiStar(line, ind)) {\n      return true;\n    } else if (item.trim() === \"/\" && this.checkMultiSlash(line, ind)) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Takes in the line, the index and the item length and inspects a \n   * line and determins the proper format if there were to be a space\n   * after an item (substring representing character(s)). \n   * @param {String} line the line to read over.\n   * @param {number} ind the index of the item in the line.\n   * @param {number} itemLen the item's length.\n   */\n  getProperAfter(line, ind, itemLen) {\n    var proper = \"\";\n    if (ind !== line.length - 1 && (ind + itemLen) <= line.length - 1) {\n      var portion = line.substring(0, ind + itemLen);\n      var end = line.substring(ind + itemLen).trim();\n      var proper = portion + \" \" + end;\n    }\n    return proper;\n  }\n\n  /**\n   * Takes in the line and the index of the item and inspects it\n   * to determine the proper format if there were to be a space\n   * before an item (substring representing character(s)).\n   * @param {String} line the line to read over.\n   * @param {number} ind the index of the item\n   */\n  getProperBefore(line, ind) {\n    var portion = line.substring(0, ind).trim();\n    var end = line.substring(ind);\n    var proper = portion + \" \" + end;\n    return proper;\n  }\n\n  /**\n   * Takes in the lines of a file and ensures that each line in it\n   * has no trailing blank spaces.\n   * @param {Array} lines the lines of the file.\n   */\n  removeTrailingBlank(lines) {\n    var fileContent = \"\";\n    var toWrite = \"\";\n    var numLines = lines.length;\n    var i;\n    for (i = 0; i < numLines; i++) {\n        var line = lines[i];\n        toWrite = line.trimRight();\n        fileContent += toWrite;\n        fileContent += \"\\n\"; \n    }\n    return fileContent;\n  }\n}","export default class Indentations {\n    \n    constructor() {\n    }\n\n    fixIndentations(content) {\n        var fileContent = \"\";\n        var levels = 0;\n        var lineToWrite = \"\";\n        var newline = \"\";\n        var lineNum = 1;\n        var lines = content.split(\"\\n\");\n        var numLines = lines.length;\n        var comment = false;\n        var i;\n        for (i = 0; i < lines.length; i++) {\n            var l = lines[i];\n            if (lineNum < numLines) {\n                newline = \"\\n\";\n            } else {\n                newline = \"\";\n            }\n            if (l.trim() === \"\") {\n                lineToWrite = l + newline;\n            } else {\n                var line = l.trim();\n                if (line.indexOf('//') === 0) {\n                    lineToWrite = this.generateIndentation(levels) + line + newline;\n                } else if (line.endsWith(\"*/\")) {\n                    lineToWrite = this.generateIndentation(levels) + line + newline;\n                    comment = false;\n                } else if (line.startsWith(\"/**\") || line.startsWith(\"/*\")) {\n                    lineToWrite = this.generateIndentation(levels) + line + newline;\n                    comment = true;\n                } else if (!comment && this.elseIndentMark(line)) {\n                    levels -= 1;\n                    lineToWrite = this.generateIndentation(levels) + line + newline;\n                    levels += 1;\n                } else if (!comment && this.isIndentMark(line)) {\n                    lineToWrite = this.generateIndentation(levels) + line + newline;\n                    levels += 1;\n                } else if (!comment && this.isEndIndentMark(line)) {\n                    levels -= 1;\n                    lineToWrite = this.generateIndentation(levels) + line + newline;\n                } else {\n                    lineToWrite = this.generateIndentation(levels) + line + newline;\n                }\n            }\n            fileContent += lineToWrite;\n            lineNum += 1;\n        }\n        return fileContent;\n    }\n\n    isIndentMark(line) {\n        if (line.trim().endsWith(\"{\")) {\n            return true;\n        } else if (line.includes(\"//\")) {\n            var subLine = line.substring(0, line.indexOf(\"//\"));\n            if (subLine.trim().endsWith(\"{\")) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    isEndIndentMark(line) {\n        if (line.trim() === \"}\" || line.trim() === \"};\") {\n            return true;\n        }\n        return false;\n    }\n\n    elseIndentMark(line) {\n        if (line.includes(\"}\")) {\n            if (line.includes(\"else\") && (line.indexOf(\"}\") < line.indexOf(\"else\"))) {\n                return true;\n            }\n            if (line.includes(\"else if\") && (line.indexOf(\"}\") < line.indexOf(\"else if\"))) {\n                return true;\n            }\n        } else {\n            return false;\n        }\n    }\n\n    generateIndentation(levels) {\n        var indent = \"\";\n        var i;\n        for (i = 0; i < levels; i++) {\n            indent += \"    \";\n        }\n        return indent;\n    }\n}","/**\n * The RmJavadocs class that removes javadoc comment\n * from the code.\n */\nexport default class RmJavadocs {\n    /**\n     * Default constructor of the RmJavadocs class.\n     */\n    constructor() {\n    }\n\n    /**\n     * Method that takes in the file content and returns the \n     * fixed file content where all javadoc comments have \n     * been removed.\n     * @param {String} content the content of the original file.\n     */\n    removeJavadocs(content) {\n        var fileContent = \"\";\n        var lines = content.split(\"\\n\");\n        var toWrite = \"\";\n        var openReached = false;\n        var closeReached = false;\n        var oneLine = false;\n        var lineNum = 1;\n        var numLines = lines.length;\n        var newline = \"\";\n        var i;\n        for (i = 0; i < lines.length; i++) {\n            var line = lines[i];\n            if (lineNum < numLines) {\n                newline = \"\\n\";\n            } else {\n                newline = \"\";\n            }\n            if (line.includes(\"/**\") && line.includes(\"*/\")) {\n                openReached = false;\n                closeReached = false;\n                oneLine = true;\n            } else if (line.includes(\"/**\")) {\n                openReached = true;\n                closeReached = false;\n            } else if (line.includes(\"*/\")) {\n                closeReached = true\n            }\n            toWrite = line;\n            if ((openReached && !closeReached) || oneLine || (openReached && closeReached)) {\n                toWrite = \"\";\n            }\n            if (closeReached) {\n                openReached = false;\n                closeReached = false;\n            }\n            oneLine = false;\n            fileContent += toWrite + newline;\n        }\n        return fileContent;\n    }\n}","import Paper from '@material-ui/core/Paper';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport React from 'react';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport StepContent from '@material-ui/core/StepContent';\nimport UploadButtons from './UploadButtons';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport SpaceBarIcon from '@material-ui/icons/SpaceBar';\nimport SubjectIcon from '@material-ui/icons/Subject';\nimport FormatIndentIncreaseIcon from '@material-ui/icons/FormatIndentIncrease';\nimport CodeIcon from '@material-ui/icons/Code';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport Alert from '@material-ui/lab/Alert';\nimport Collapse from '@material-ui/core/Collapse';\nimport './Component.css';\nimport Javadocs from './Javadocs'; \nimport FileDownloadComponent from './FileDownloadComponent';\nimport SingleLines from './SingleLines';\nimport MultiLines from './MultiLines';\nimport Whitespaces from './Whitespaces';\nimport Indentations from './Indentations';\nimport RmJavadocs from './RmJavadocs';\n\nconst mainStyles = makeStyles((theme) => ({\n    root: {\n      display: 'flex',\n      '& > *': {\n        margin: theme.spacing(7),\n        width: theme.spacing(window.screen.width),\n        height: theme.spacing(window.screen.height),\n      },\n    },\n}));\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        color: '#6493a1',\n        width: '70%',\n        height: '100%',\n        margin: 30,\n    },\n    button: {\n        backgroundColor: '#6493a1',\n        '&:hover': {\n          backgroundColor: '#537b86',\n        },\n        color: 'white',\n        marginTop: theme.spacing(1),\n        marginRight: theme.spacing(1),\n    },\n    backButton: {\n        color: '#154854',\n        marginTop: theme.spacing(1),\n        marginRight: theme.spacing(1),\n    },\n    actionsContainer: {\n        marginBottom: theme.spacing(2),\n    },\n    resetContainer: {\n        padding: theme.spacing(3),\n        backgroundColor: '#e3ecef'\n    },\n    step: {\n        color: '#154854',\n    },\n}));\n\nconst StyledToggle = withStyles({\n  root: {\n    color: '#white',\n    borderColor: '#white',\n    whiteSpace: 'break-spaces',\n    '&:hover': {\n      borderColor: '#6493a1',\n    },\n  },\n  selected: {\n    '&:active': {\n      backgroundColor: '#5c8794',\n    },\n    backgroundColor: '#bcf5bc',\n    color: '#154854',\n    borderColor: '#154854',\n    label: '#154854'\n  },\n  label: {\n    '&:active': {\n      color: '#154854',\n    },\n    '&:hover': {\n      color: '#6493a1',\n    },\n  }\n})(ToggleButton);\n  \nfunction getSteps() {\n  return ['Choose a file', 'Choose operations', 'Download your file'];\n}\n\nconst iconTheme = createMuiTheme({\n    props: {\n        MuiStepIcon: {\n            root: {\n                color: '#6493a1',\n            },\n            active: {\n                color: '#6493a1',\n            },\n            disabled: {\n              color: 'white',\n            }\n        },\n    },\n});\n\nfunction VerticalLinearStepper() {\n    const classes = useStyles();\n    const [activeStep, setActiveStep] = React.useState(0);\n    const steps = getSteps();\n\n    const [operationOpen, setOperationOpen] = React.useState(false);\n    const [fileOpen, setFileOpen] = React.useState(false);\n    const [acceptedOpen, setAcceptedOpen] = React.useState(false);\n    const [rejectedOpen, setRejectedOpen] = React.useState(false);\n\n    const [javaSelected, setJava] = React.useState(false);\n    const [singleSelected, setSingle] = React.useState(false);\n    const [multiSelected, setMulti] = React.useState(false);\n    const [indentSelected, setIndent] = React.useState(false);\n    const [whiteSelected, setWhite] = React.useState(false);\n    const [rmJavaSelected, setRmJavaSelected] = React.useState(false);\n\n    const [intialAcceptedFiles, setIntialAcceptedFiles] = React.useState([]);\n    const [intialRejectedFiles, setIntialRejectedFiles] = React.useState([]);\n    const [uploadedFiles, setUploadedFiles] = React.useState({});\n    const [fixedFileContents, setFixedFileContents] = React.useState({});\n    const [newFileNames, setNewFileNames] = React.useState([]);\n\n    function fileCallback(oldName, newName) {\n      setNewFileNames(newFileNames.map(function(filename){return (filename === oldName ? newName : filename)}));\n    }\n\n    const handleButton = () => {\n      if (activeStep === 0) {\n        handleNext();\n      } else if (activeStep === 1) {\n        handleRun();\n      } else {\n        handleDownloadAll();\n      }\n    }\n  \n    const handleNext = () => {\n      if (activeStep === 0) {\n        if (uploadedFiles.length > 0) {\n          setFileOpen(false);\n          setAcceptedOpen(false);\n          setRejectedOpen(false);\n          setActiveStep((prevActiveStep) => prevActiveStep + 1);\n        } else {\n          setFileOpen(true);\n        }\n      }\n    };\n  \n    const handleBack = () => {\n        if (activeStep === 1) {\n          setJava(false);\n          setSingle(false);\n          setMulti(false);\n          setWhite(false);\n          setIndent(false);\n          setRmJavaSelected(false);\n          if (operationOpen) {\n              setOperationOpen(false);\n          }\n          setAcceptedOpen(true);\n          if (intialRejectedFiles.length <= 0) {\n            setRejectedOpen(false);\n          } else {\n            setRejectedOpen(true);\n          }\n          setActiveStep((prevActiveStep) => prevActiveStep - 1);\n        } else if (activeStep === 2) {\n          handleReset();\n        } else {\n          setActiveStep((prevActiveStep) => prevActiveStep - 1);\n        }\n    };\n\n    function fileAccessMethod(inputFile){\n      return new Promise(\n      function(resolve) {\n      var reader = new FileReader();\n      reader.onloadend = (function(reader)\n      {\n          return function() {\n          resolve(reader.result);\n          }\n      })(reader);\n      reader.readAsText(inputFile);\n      });\n    }\n\n    function performAll() {\n      const java = new Javadocs();\n      const single = new SingleLines();\n      const multi = new MultiLines();\n      const white = new Whitespaces();\n      const indent = new Indentations();\n      const rmJava = new RmJavadocs();\n      var i;\n      var contentList = [];\n      for (i = 0; i < uploadedFiles.length; i++) {\n        var inputFile = uploadedFiles[i];\n        fileAccessMethod(inputFile).then(function(fileText) {\n          var fixedText = fileText;\n          if (rmJavaSelected) {\n            fixedText = rmJava.removeJavadocs(fixedText);\n          }\n          if (javaSelected) {\n            fixedText = java.addJavadocs(fixedText);\n          }\n          if (singleSelected) {\n            fixedText = single.removeSingleLines(fixedText);\n          }\n          if (multiSelected) {\n            fixedText = multi.removeMultiLines(fixedText);\n          }\n          if (whiteSelected) {\n            fixedText = white.fixWhitespaces(fixedText);\n          }\n          if (indentSelected) {\n            fixedText = indent.fixIndentations(fixedText);\n          }\n          contentList.push(fixedText);\n        });\n      }\n      setFixedFileContents(contentList);\n    }\n\n    const handleRun = () => {\n      if (activeStep === 1) {\n        if (!javaSelected && !singleSelected && !multiSelected && !whiteSelected && !indentSelected && !rmJavaSelected) {\n            setOperationOpen(true);\n        } else {\n            setOperationOpen(false);\n            performAll();\n            setActiveStep((prevActiveStep) => prevActiveStep + 1);\n        }\n      }\n    }\n\n    const handleDownloadAll = () => {\n      var i;\n      for (i = 0; i < newFileNames.length; i++) {\n        var newFileName = newFileNames[i];\n        var content = fixedFileContents[i];\n        download(newFileName, content);\n      }\n    }\n\n    function download(filename, text) {\n      var element = document.createElement('a');\n      element.setAttribute('href', 'data:.java;charset=utf-8,' + encodeURIComponent(text));\n      element.setAttribute('download', filename);\n    \n      element.style.display = 'none';\n      document.body.appendChild(element);\n    \n      element.click();\n    \n      document.body.removeChild(element);\n    }\n  \n    const handleReset = () => {\n      setJava(false);\n      setSingle(false);\n      setMulti(false);\n      setWhite(false);\n      setIndent(false);\n      setRmJavaSelected(false);\n      if (operationOpen) {\n        setOperationOpen(false);\n      }\n      if (fileOpen) {\n        setFileOpen(false);\n      }\n      if (acceptedOpen) {\n        setAcceptedOpen(false);\n      }\n      if (rejectedOpen) {\n        setRejectedOpen(false);\n      }\n      setUploadedFiles({});\n      setIntialRejectedFiles([]);\n      setIntialAcceptedFiles([]);\n      setFixedFileContents({});\n      setNewFileNames([]);\n      setActiveStep(0);\n    };\n\n    function JavadocToggle() {\n        return (\n          <StyledToggle value=\"javadoc\" selected={javaSelected} onChange={() => {setJava(!javaSelected);}}>\n              <CodeIcon />  Add Javadocs\n          </StyledToggle>\n        );\n    }\n\n    function SingleToggle() {\n        return (\n            <StyledToggle value=\"single\" selected={singleSelected} onChange={() => {setSingle(!singleSelected);}}>\n                <SubjectIcon /> Remove // Comments\n            </StyledToggle>\n        );\n    }\n\n    function MultiToggle() {\n        return(\n            <StyledToggle value=\"multi\" selected={multiSelected} onChange={() => {setMulti(!multiSelected);}}>\n                <SubjectIcon /> Remove /* Comments\n            </StyledToggle>\n        );\n    }\n\n    function WhitespaceToggle() {\n        return(\n          <StyledToggle value=\"whitespace\" selected={whiteSelected} onChange={() => {setWhite(!whiteSelected);}}>\n              <SpaceBarIcon /> Fix Whitespaces\n          </StyledToggle>\n        );\n    }\n\n    function IndentationToggle() {\n        return (\n          <StyledToggle value=\"indent\" selected={indentSelected} onChange={() => {setIndent(!indentSelected);}}>\n              <FormatIndentIncreaseIcon /> Fix Indentations\n          </StyledToggle>\n        );\n    }\n\n    function RmJavadocsToggle() {\n      return (\n        <StyledToggle value=\"rmJava\" selected={rmJavaSelected} onChange={() => {setRmJavaSelected(!rmJavaSelected);}}>\n            <FormatIndentIncreaseIcon /> Remove Javadocs\n        </StyledToggle>\n      );\n    }\n\n    function onFileDrop(acceptedFiles, rejectedFiles) {\n      acceptedFiles = Array.from(acceptedFiles);\n      rejectedFiles = Array.from(rejectedFiles);\n      setIntialAcceptedFiles(acceptedFiles);\n      setIntialRejectedFiles(rejectedFiles);\n      if (acceptedFiles.length <= 0) {\n        setAcceptedOpen(false);\n      } else {\n        setAcceptedOpen(true);\n      }\n      if (rejectedFiles.length <= 0) {\n        setRejectedOpen(false);\n      } else {\n        setRejectedOpen(true);\n      }\n      setUploadedFiles(acceptedFiles);\n      var nameList = acceptedFiles.map(function(file){return file.name});\n      setNewFileNames(nameList);\n      if (acceptedFiles.length > 0) {\n        setFileOpen(false);\n      }\n    }\n\n    function getFileList(list) {\n      var fullString = \"\";\n      var i;\n      for (i = 0; i < list.length; i++) {\n        fullString += list[i].name + \", \";\n      }\n      fullString = fullString.substring(0, fullString.length - 2);\n      return fullString;\n    }\n  \n    function getRejectFileList(num) {\n      var fullString = \"\";\n      return fullString + num + \" file was not uploaded due to incorrect format\";\n    }\n\n    function stepOne() {\n      return (\n        <Typography>\n            Upload files (.java file) for which you would like the program to clear style check errors:\n            <p></p>\n            <UploadButtons onFileDropped={onFileDrop}></UploadButtons>\n            <p></p>\n        </Typography>\n      );\n    }\n\n    function stepTwo() {\n        return (\n          <Typography>\n              <p> Chooose the operations you want to perform on the .java files. The software will only apply\n                 the selected operations on the contents of the .java files and you can download the fixed version\n                 in the next step:\n              </p>\n              <div style={{ whiteSpace: 'break-spaces', lineHeight: 4.5 }}>\n                  <p></p>\n                  <JavadocToggle></JavadocToggle><span>    </span>\n                  <SingleToggle></SingleToggle><span>    </span>\n                  <MultiToggle></MultiToggle><span>    </span>\n                  <WhitespaceToggle></WhitespaceToggle><span>    </span>\n                  <IndentationToggle></IndentationToggle><span>    </span>\n                  <RmJavadocsToggle></RmJavadocsToggle>\n                  <p></p>\n              </div>\n          </Typography>\n        );\n    }\n\n    function getFileDownloadComponents() {\n      var i;\n      var componentList = [];\n      for (i = 0; i < newFileNames.length; i++) {\n        var name = newFileNames[i];\n        componentList.push(\n          <div>\n          <FileDownloadComponent callbackFromParent={fileCallback} defaultFileName={name} contentList={fixedFileContents} fileIndex={i}></FileDownloadComponent>\n          </div>\n        );\n      }\n      return componentList;\n    }\n    \n    function stepThree() {\n      return (\n        <Typography>\n          Enter a name for each file (without spaces) and download the files below. If you don't provide a name we will use the original file name\n          to download your file.\n          <p></p>\n          {getFileDownloadComponents()}\n          <p></p>\n        </Typography>\n      );\n    }\n\n    function getStepContent(step) {\n        switch (step) {\n          case 0:\n              return stepOne();\n          case 1:\n              return stepTwo();\n          case 2:\n              return stepThree();\n          default:\n              return 'Unknown step';\n        }\n    }\n\n    return (\n      <div className={classes.root}>\n        <Stepper activeStep={activeStep} orientation=\"vertical\" style={{ backgroundColor: '#e3ecef'}}>\n          {steps.map((label, index) => (\n            <Step key={label} className={classes.step}>\n                <ThemeProvider theme={iconTheme}>\n                    <StepLabel>\n                        <Typography className='Step-header'>\n                            {label}\n                        </Typography>\n                    </StepLabel>\n                </ThemeProvider>\n              <StepContent>\n                <Typography>{getStepContent(index)}</Typography>\n                <Collapse in={acceptedOpen}>\n                  <p></p>\n                  <Alert width='100px'>{getFileList(intialAcceptedFiles)}</Alert>\n                  <p></p>\n                </Collapse>\n                <Collapse in={rejectedOpen}>\n                  <p></p>\n                  <Alert width='100px' severity=\"error\">{getRejectFileList(intialRejectedFiles.length)}</Alert>\n                  <p></p>\n                </Collapse>\n                <Collapse in={fileOpen} timeout='auto'> \n                    <p></p>\n                    <Alert severity=\"error\">Please upload at least one file</Alert>\n                    <p></p>\n                </Collapse>\n                <Collapse in={operationOpen} timeout='auto'> \n                    <p></p>\n                    <Alert severity=\"error\">Please select at least one operation</Alert>\n                    <p></p>\n                </Collapse>\n                <div className={classes.actionsContainer}>\n                  <div>\n                    <Button\n                      disabled={activeStep === 0}\n                      onClick={handleBack}\n                      className={classes.backButton}\n                    >\n                      {activeStep === 2 && 'Reset'}\n                      {activeStep < 2 && 'Back'}\n                    </Button>\n                    <Button\n                      onClick={handleButton}\n                      className={classes.button}\n                      disableElevation\n                      variant='contained'\n                    >\n                      {activeStep === 0 && 'Next'}\n                      {activeStep === 1 && 'Run'}\n                      {activeStep === 2 && 'Download All Files'}\n                    </Button>\n                  </div>\n                </div>\n              </StepContent>\n            </Step>\n          ))}\n        </Stepper>\n        {activeStep === steps.length && (\n          <Paper square elevation={0} className={classes.resetContainer}>\n            <Typography>All steps completed - you&apos;re finished</Typography>\n            <Button onClick={handleReset} className={classes.button} variant='contained' disableElevation>\n              Reset\n            </Button>\n          </Paper>\n        )}\n      </div>\n    );\n  }\n\nexport default function StepperPage() {\n    const classes = mainStyles();\n  \n    return(\n      <div className={classes.root}>\n        <Paper elevation={0} style={{ backgroundColor: '#e3ecef', height: 6*window.screen.height/7, width: window.screen.width}}>\n            <VerticalLinearStepper>\n            </VerticalLinearStepper>\n        </Paper>\n      </div>\n    );\n  \n}","import Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n\n/**\n * Styles to apply to the app bar elements of the page.\n */\nconst appBarStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n    },\n    title: {\n      flexGrow: 1,\n      color: '#6493a1',\n    },\n    button: {\n      color: '#6493a1',\n      borderColor: '#6493a1',\n    }\n}));\n\n/**\n * The ContactButton component created to open a dialog \n * within the application for the user to interact with.\n */\nexport default function ContactButton() {\n    /**\n     * Styles and necessary states of the button\n     * to keep track of.\n     */\n    const classes = appBarStyles();\n    const [open, setOpen] = React.useState(false);\n  \n    /**\n     * The handler method that handles when the button\n     * is clicked to open.\n     */\n    const handleClickOpen = () => {\n      setOpen(true);\n    };\n  \n    /**\n     * The handler method that handles when the button \n     * is clicked to close.\n     */\n    const handleClose = () => {\n      setOpen(false);\n    };\n  \n    /**\n     * The components that make up the ContactButton.\n     */\n    return (\n      <div>\n        <Button variant=\"outlined\" className={classes.button} onClick={handleClickOpen}>\n          Contact Us\n        </Button>\n        <Dialog\n          open={open}\n          keepMounted\n          disableBackdropClick\n          disableEscapeKeyDown\n          onClose={handleClose}\n          aria-labelledby=\"alert-dialog-slide-title\"\n          aria-describedby=\"alert-dialog-slide-description\"\n        >\n          <DialogTitle id=\"alert-dialog-slide-title\">{\"Contact Us\"}</DialogTitle>\n          <DialogContent>\n            <DialogContentText id=\"alert-dialog-slide-description\">\n              Let us know if you had issues using ICEcap, if you have suggestions or feedback, or if you would \n              like to get in touch!\n            </DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={handleClose} className={classes.button}>\n              Cancel\n            </Button>\n            <Button onClick={handleClose} className={classes.button}>\n              Submit\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </div>\n    );\n  }","import React, { Component } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport ContactButton from './ContactButton';\nimport './Component.css';\n\nconst appBarStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n    },\n    title: {\n      flexGrow: 1,\n      color: '#6493a1',\n    },\n    button: {\n      color: '#6493a1',\n    }\n  }));\n  \nexport default function PageHeader() {\n    const classes = appBarStyles();\n    return (\n        <div className={classes.root}>\n        <AppBar elevation={0} position=\"static\" color='inherit'>\n            <Toolbar>\n            <Typography variant=\"App-header\" className={classes.title}>\n                ICEcΔp v1.0\n            </Typography>\n            <Button className={classes.button} variant=\"App-header\" target=\"_blank\" href=\"https://docs.google.com/forms/d/1A8qwG5T8pZIKmCaPYYSiEoqgzKsWMKBYmpUAqJ4zWw0/prefill\" color=\"inherit\">contact us</Button>\n            {/* <ContactButton></ContactButton> */}\n            </Toolbar>\n        </AppBar>\n        </div>\n    );\n  }","import React from 'react';\nimport './Component.css';\nimport Paper from '@material-ui/core/Paper';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport { animateScroll as scroll } from \"react-scroll\";\n\nconst mainStyles = makeStyles((theme) => ({\n    root: {\n      display: 'flex',\n      '& > *': {\n        margin: theme.spacing(7),\n        width: theme.spacing(window.screen.width),\n        height: theme.spacing(window.screen.height),\n      },\n    },\n    mainText: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      color: 'white',\n      fontWeight: 600,\n      fontSize: '150px',\n      fontFamily: 'Open-Sans',\n      marginLeft: theme.spacing(10),\n      marginTop: theme.spacing(10),\n      marginRight: theme.spacing(1),\n    },\n    subMainText: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      color: 'white',\n      fontSize: '35px',\n      fontWeight: 600,\n      fontFamily: 'Open-Sans',\n      marginLeft: theme.spacing(11),\n      marginRight: theme.spacing(1),\n    },\n    subText: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      color: 'white',\n      fontSize: '18px',\n      fontWeight: 600,\n      fontFamily: 'Open-Sans',\n      marginLeft: theme.spacing(11),\n      marginTop: theme.spacing(2),\n      marginRight: theme.spacing(8),\n    },\n    button: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      backgroundColor: 'white',\n      color: '#154854',\n      marginTop: theme.spacing(5),\n      marginRight: theme.spacing(1),\n      marginLeft: theme.spacing(11),\n    },\n  }));\n  \nexport default function MainInfoPage() {\n  const classes = mainStyles();\n  const scrollToTop = () => {\n    scroll.scrollTo(6*window.screen.height/7);\n  };\n  return (\n    <div className={classes.root}>\n      <Paper elevation={0} className='Logo' style={{ height: 2*window.screen.height/3, width: window.screen.width }}>\n        <div>  \n          <Typography className={classes.mainText}>ICEcΔp</Typography>\n          <Typography className={classes.subMainText}>\n            (Interactive Convention Editor)\n          </Typography>\n          <Typography className={classes.subText}>\n            We all have faced issues with the 200+ style check errors that appear right when we are ready to submit our CS 61B\n            projects. In three easy steps below, you can get rid of many style check errors from your project.\n          </Typography>\n            <Button\n                className={classes.button}\n                disableElevation\n                variant='contained'\n                onClick={scrollToTop}\n              >\n                Start\n            </Button>\n        </div>\n      </Paper>\n    </div>\n  );\n}","import React, { Component } from 'react';\nimport './App.css';\nimport StepperPage from './components/StepperPage';\nimport PageHeader from './components/PageHeader';\nimport MainInfoPage from './components/MainInfoPage';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App-body'>\n          <PageHeader></PageHeader>\n          <MainInfoPage></MainInfoPage>\n          <StepperPage></StepperPage>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}